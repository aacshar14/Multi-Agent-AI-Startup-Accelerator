from flask import Flask, request, jsonify
from flask_cors import CORS
from crew import StartupCrew
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Debug: Check if DeepSeek API key is loaded
deepseek_api_key = os.getenv("DEEPSEEK_API_KEY")
if not deepseek_api_key:
    print("WARNING: DEEPSEEK_API_KEY not found in environment variables!")
    print("Please set your DeepSeek API key in a .env file or as an environment variable")
else:
    print(f"DeepSeek API key loaded: {deepseek_api_key[:10]}...")

# Initialize Flask app
app = Flask(__name__)
# Enable Cross-Origin Resource Sharing
CORS(app)

# Define the directory for output files
output_dir = "outputs"
os.makedirs(output_dir, exist_ok=True)

# Define the API endpoint to run the crew
@app.route('/kickoff', methods=['POST'])
def kickoff_crew():
    """
    API endpoint to kickoff the startup crew.
    Expects a JSON payload with 'startup_idea_input' and 'agent_configs'.
    """
    data = request.get_json()
    if not data or 'startup_idea_input' not in data:
        return jsonify({"error": "Missing 'startup_idea_input' in request"}), 400

    startup_idea = data['startup_idea_input']
    agent_configs = data.get('agent_configs', {})
    inputs = {
        'startup_idea_input': startup_idea,
        'agent_configs': agent_configs
    }

    # Instantiate and run the crew
    try:
        crew_instance = StartupCrew(agent_configs=agent_configs).crew()
        result = crew_instance.kickoff(inputs=inputs)
    except Exception as e:
        error_msg = f"Error running crew: {str(e)}"
        print(error_msg)
        return jsonify({"error": error_msg}), 500

    # --- Read the output files generated by the crew ---
    # The output_file names must match what you defined in your crew.py tasks
    output_files = {
        'ideator': 'startup_idea.md',
        'researcher': 'market_research.md',
        'product_designer': 'product_Experience.md',
        'brand_expert': 'brand_identity.md',
        'pitch_writer': 'investor_pitch.md',
        'frontend_dev': 'frontend_code.md',
        'backend_dev': 'backend_code.md',
        'infra_tech': 'final_deliverable.md'
    }

    results = {}
    for agent_id, filename in output_files.items():
        file_content = None
        candidate_paths = [filename, os.path.join(output_dir, filename)]
        for path in candidate_paths:
            try:
                if os.path.exists(path):
                    with open(path, 'r', encoding='utf-8', errors='replace') as f:
                        file_content = f.read()
                    break
            except Exception as e:
                file_content = f"Error reading file '{filename}': {e}"
                break
        if file_content is None:
            file_content = f"Output file '{filename}' not found."
        results[agent_id] = file_content

    # You can also include the final result from kickoff if needed
    results['final_crew_result'] = str(result)

    return jsonify(results)

# To run the server
if __name__ == "__main__":
    # Use host='0.0.0.0' to make the server accessible from your network
    app.run(host='0.0.0.0', port=5000, debug=True)